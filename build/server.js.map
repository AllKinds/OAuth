{"version":3,"sources":["server.ts"],"names":[],"mappings":";;AAAA,iCAAuC;AACvC,mCAAwC;AACxC,wCAA2C;AAC3C,yCAA+C;AAC/C,mCAAwC;AAExC,+BAAsC;AAGtC,2CAAoD;AACpD,IAAI,cAAc,GAAG,IAAI,qBAAc,EAAE,CAAC;AAE1C,2CAAoD;AACpD,IAAI,cAAc,GAAG,IAAI,qBAAc,EAAE,CAAC;AAE1C,+CAAwD;AACxD,IAAI,gBAAgB,GAAG,IAAI,yBAAgB,EAAE,CAAC;AAE9C,+CAAwD;AACxD,IAAI,gBAAgB,GAAG,IAAI,yBAAgB,EAAE,CAAC;AAE9C,6BAA6B;AAC7B,QAAQ,CAAC,OAAO,CAAC,+BAA+B,EAAE;IAChD,cAAc,EAAE,IAAI;CAErB,CAAC,CAAC;AAEH,iCAAiC;AACjC,IAAI,GAAG,GAAG,OAAO,EAAE,CAAC;AAEpB,yBAAyB;AACzB,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;AAE9B,SAAS;AACT,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AAEvB,iDAAiD;AACjD,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC;IAC5B,QAAQ,EAAE,IAAI;CACf,CAAC,CAAC,CAAC;AAEJ,4DAA4D;AAC5D,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC;IACd,MAAM,EAAE,0BAA0B;IAClC,iBAAiB,EAAE,IAAI;IACvB,MAAM,EAAE,IAAI;CACb,CAAC,CAAC,CAAC;AAEJ,8CAA8C;AAC9C,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;AAE/B,4BAA4B;AAC5B,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AAG9B,2BAA2B;AAC3B,wCAAwC;AAExC,+CAA+C;AAC/C,2BAA2B;AAC3B,gBAAgB;AAChB,KAAK;AAEL,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;KACf,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;KAC7B,GAAG,CAAC,cAAc,CAAC,eAAe,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC;AAEpE,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC;KACvB,GAAG,CAAC,cAAc,CAAC,eAAe,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;AAEvE,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;KACd,GAAG,CAAC,cAAc,CAAC,eAAe,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;AAErE,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC;KACjB,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,gBAAgB,CAAC,WAAW,CAAC;KAClE,GAAG,CAAC,cAAc,CAAC,eAAe,EAAE,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAExE,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC;KAC1B,GAAG,CAAC,cAAc,CAAC,eAAe,EAAE,gBAAgB,CAAC,aAAa,CAAC;KACnE,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AAEvE,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC;KACtB,IAAI,CAAC,cAAc,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAE1E,oCAAoC;AACpC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAExB,mBAAmB;AACnB,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC","file":"../src/server.js","sourcesContent":["import * as express     from 'express';\nimport * as mongoose    from 'mongoose';\nimport * as bodyParser  from 'body-parser';\nimport * as session     from 'express-session';\nimport * as passport    from 'passport';\nimport * as ejs         from 'ejs';\nimport * as morgan      from 'morgan';\n\n\nimport { UserController } from './controllers/user';\nvar userController = new UserController();\n\nimport { AuthController } from './controllers/auth';\nvar authController = new AuthController();\n\nimport { OAuth2Controller } from './controllers/oauth2';\nvar oauth2Controller = new OAuth2Controller();\n\nimport { ClientController } from './controllers/client';\nvar clientController = new ClientController();\n\n// Connect to the fos MongoDB\nmongoose.connect('mongodb://localhost:27017/fos', {\n  useMongoClient: true,\n  /* other options */\n});\n\n// Create our Express application\nvar app = express();\n\n// Set view engine to ejs\napp.set('view engine', 'ejs');\n\n// Dexter\napp.use(morgan('dev'));\n\n// Use the body-parser package in our application\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\n\n// Use express session support since OAuth2orize requires it\napp.use(session({\n  secret: 'Super Secret Session Key',\n  saveUninitialized: true,\n  resave: true\n}));\n\n// Use the passport package in our application\napp.use(passport.initialize());\n\n// Create our Express router\nvar router = express.Router();\n\n\n// router.route('/persons')\n//   .post(personController.postPerson);\n\n// app.use('/oauth2/token', (req, res, next)=>{\n//       console.log(\"Ba\");\n//       next();\n// })\n\nrouter.route('/users')\n      .post(userController.postUser)\n      .get(authController.isAuthenticated, userController.getUsers);\n\nrouter.route('/user/:user_id')\n      .get(authController.isAuthenticated, userController.getUserData); \n\nrouter.route('/dudu')\n      .get(authController.isAuthenticated, userController.getMyUser);\n\nrouter.route('/clients')\n      .post(authController.isAuthenticated, clientController.postClients)\n      .get(authController.isAuthenticated, clientController.getClients);\n\nrouter.route('/oauth2/authorize')\n      .get(authController.isAuthenticated, oauth2Controller.authorization)\n      .post(authController.isAuthenticated, oauth2Controller.decision);\n\nrouter.route('/oauth2/token')\n      .post(authController.isClientAuthenticated, oauth2Controller.token);\n\n// Register all our routes with /api\napp.use('/api', router);\n\n// Start the server\napp.listen(3000);"]}