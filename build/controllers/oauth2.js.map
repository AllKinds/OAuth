{"version":3,"sources":["controllers/oauth2.ts"],"names":[],"mappings":"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","file":"../../src/controllers/oauth2.js","sourcesContent":["import * as oauth2orize from 'oauth2orize';\nimport { User }     from '../models/user';\nimport { Code }     from '../models/code';\nimport { Token }    from '../models/token';\nimport { Client }   from '../models/client';\n\n// Create OAuth 2.0 server\nlet server = oauth2orize.createServer();\n\n// -----------------------------------Serialialization-----------------------------------\n/*\n    When a client redirects a user to user authorization endpoint, an authorization\n    transaction is initiated. To complete the transaction, the user must authenticate\n    and approve the authorization request. Because this may involve multiple HTTP \n    request/response exchanges, the transaction is stored in the session.\n\n    An application must supply serialization functions, which determine how the client \n    object is serialized into the session.  Typically this will be a simple matter of\n    serializing the client's ID, and deserializing by finding the client by ID from the database.\n */\n\nserver.serializeClient((client, callback) => {\n    return callback(null, client._id);\n});\n\nserver.deserializeClient((id, callback) => {\n    Client.findOne({ _id: id }, (err, client) => {\n        if(err) return callback(err);\n        return callback(null, client);\n    });\n});\n\n\n// ------------------------------------Authorization-------------------------------------\n/*\n    OAuth 2.0 specifies a framework that allows users to grant client applications \n    limited access to their protected resources.  It does this through a process of the \n    user granting access, and the client exchanging the grant for an access token.\n\n    Grant authorization codes.  The callback takes the `client` requesting authorization,\n    the `redirectUri` (which is used as a verifier in the subsequent exchange), the \n    authenticated `user` granting access, and their response, which contains approved \n    scope, duration, etc. as parsed by the application. The application issues a code, \n    which is bound to these values, and will be exchanged for an access token.\n */\nserver.grant(oauth2orize.grant.code((client, redirectUri, user, ares, callback) => {\n    //  Create a new authorization code\n    let code = new Code({\n        value: uid(16),\n        clientId: client._id,\n        redirectUri: redirectUri,\n        userId: user._id\n    });\n\n    // Save the auth code and check for errors\n    code.save((err)=> {\n        if(err) return callback(err);\n        callback(null, code.value);\n    });\n}));\n\n/*\n    Exchange authorization codes for access tokens. The callback accepts the `client`, \n    which is exchanging `code` and any `redirectUri` from the authorization request for\n    verification. If these values are validated, the application issues an access token\n    on behalf of the user who authorized the code.\n */\nserver.exchange(oauth2orize.exchange.code((client, code, redirectUri, callback) => {\n    Code.findOne({ value: code }, (err, authCode) => {\n        if(err) return callback(err);\n        if(authCode === null) return callback(null, false);\n        if(client._id.toString() !== authCode.clientId) return callback(null, false);\n        if(redirectUri !== authCode.redirectUri) return callback(null, false);\n\n        // Delete auth code now that it has been used\n        authCode.remove((err) => {\n            if(err) return callback(err);\n\n            //  Create a new access token\n            let token = new Token({\n                value: uid(356),\n                clientId: authCode.clientId,\n                userId: authCode.userId\n            });\n\n            // Save the access token and check for errors\n            token.save((err) => {\n                if(err) return callback(err);\n                callback(null, token);\n            });\n        });\n    });\n}));\n\nexport class OAuth2Controller {\n\n    // `authorization` middleware accepts a `validate` callback which is\n    // responsible for validating the client making the authorization request.  In\n    // doing so, is recommended that the `redirectUri` be checked against a\n    // registered value, although security requirements may vary accross\n    // implementations.  Once validated, the `callback` callback must be invoked with\n    // a `client` instance, as well as the `redirectUri` to which the user will be\n    // redirected after an authorization decision is obtained.\n    //\n    // This middleware simply initializes a new authorization transaction.  It is\n    // the application's responsibility to authenticate the user and render a dialog\n    // to obtain their approval (displaying details about the client requesting\n    // authorization).  We accomplish that here by routing through `ensureLoggedIn()`\n    // first, and rendering the `dialog` view. \n\n    authorization = [\n        server.authorization((clientId, redirectUri, callback) => {\n            Client.findOne({ id: clientId }, (err, client) => {\n                if(err) return callback(err);\n                return callback(null, client, redirectUri);\n            });\n        }), (req, res) => {\n            // Some ejs BS\n            res.render('dialog', { transactionID: req.oauth2.transactionID, user: req.user, client: req.oauth2.client });\n        }\n    ];\n\n    // user decision endpoint\n    //\n    // `decision` middleware processes a user's decision to allow or deny access\n    // requested by a client application.  Based on the grant type requested by the\n    // client, the above grant middleware configured above will be invoked to send\n    // a response.\n\n    decision = [\n        server.decision()\n    ];\n\n    // token endpoint\n    //\n    // `token` middleware handles client requests to exchange authorization grants\n    // for access tokens.  Based on the grant type being exchanged, the above\n    // exchange middleware will be invoked to handle the request.  Clients must\n    // authenticate when making requests to this endpoint.\n\n    token = [\n        server.token(),\n        server.errorHandler()\n    ];\n\n}\n\n\n\n\n/**\n * Return a unique identifier with the given `len`.\n *\n *     utils.uid(10);\n *     // => \"FDaS435D2z\"\n *\n * @param {Number} len\n * @return {String}\n * @api private\n */\nfunction uid (len) {\n  var buf = []\n    , chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    , charlen = chars.length;\n\n  for (var i = 0; i < len; ++i) {\n    buf.push(chars[getRandomInt(0, charlen - 1)]);\n  }\n\n  return buf.join('');\n};\n\n/**\n * Return a random int, used by `utils.uid()`\n *\n * @param {Number} min\n * @param {Number} max\n * @return {Number}\n * @api private\n */\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n"]}