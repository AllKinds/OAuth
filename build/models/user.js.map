{"version":3,"sources":["models/user.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AACnD,sCAAwC;AAW3B,QAAA,UAAU,GAAW,IAAI,iBAAM,CAAE;IAC1C,EAAE,EAAE;QACA,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,SAAS,EAAE,MAAM;IACjB,QAAQ,EAAE,MAAM;IAChB,KAAK,EAAE,MAAM;IACb,IAAI,EAAE,MAAM;CACf,CAAC,CAAC;AAEH,uCAAuC;AACvC,kBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,UAAS,QAAQ;IACtC,IAAI,IAAI,GAAG,IAAI,CAAC;IAEhB,2CAA2C;IAC3C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IAEpD,yCAAyC;IACzC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,UAAS,GAAG,EAAE,IAAI;QAClC,EAAE,CAAC,CAAC,GAAG,CAAC;YAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAE9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,UAAS,GAAG,EAAE,IAAI;YACvD,EAAE,CAAC,CAAC,GAAG,CAAC;gBAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,QAAQ,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,kBAAU,CAAC,OAAO,CAAC,cAAc,GAAG,UAAS,QAAQ,EAAE,EAAE;IACrD,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAS,GAAG,EAAE,OAAO;QACzD,EAAE,CAAC,CAAC,GAAG,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QACxB,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,4BAA4B;AACjB,QAAA,IAAI,GAAG,gBAAK,CAAQ,MAAM,EAAE,kBAAU,CAAC,CAAC","file":"../../src/models/user.js","sourcesContent":["import { Document, Schema, model } from 'mongoose';\nimport * as bcrypt from 'bcrypt-nodejs';\n\ninterface IUser extends Document{\n    id: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    phone: Number;\n    mail?: string;\n}\n\nexport const UserSchema: Schema = new Schema ({\n    id: {\n        type: String,\n        unique: true,\n        required: true\n    },\n    password: {\n        type: String,\n        required: true\n    },\n    firstName: String,\n    lastName: String,\n    phone: Number,\n    mail: String\n});\n\n// Execute before each user.save() call\nUserSchema.pre('save', function(callback) {\n  let user = this;\n\n  // Break out if the password hasn't changed\n  if (!user.isModified('password')) return callback();\n\n  // Password changed so we need to hash it\n  bcrypt.genSalt(5, function(err, salt) {\n    if (err) return callback(err);\n\n    bcrypt.hash(user.password, salt, null, function(err, hash) {\n      if (err) return callback(err);\n      user.password = hash;\n      callback();\n    });\n  });\n});\n\nUserSchema.methods.verifyPassword = function(password, cb) {\n    bcrypt.compare(password, this.password, function(err, isMatch) {\n        if (err) return cb(err);\n        cb(null, isMatch);\n    });\n};\n\n// Export the Mongoose model\nexport let User = model<IUser>('User', UserSchema);"]}